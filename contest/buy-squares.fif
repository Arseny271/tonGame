#!/usr/bin/fift -s
"TonUtil.fif" include
"GetOpt.fif" include

{ ."usage: " @' $0 type ." <filename-base> <dest-addr> <seqno> <square-price> <n> <square-1> <square-2> ... <square-n> [-S <savefile>] " cr
  ."Creates a request to simple wallet created by new-wallet.fif, with private key loaded from file <filename-base>.pk "
  ."and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)" cr
  
  ."buys <n> squares, with numbers listed in <square-1> <square-2> ... <square-n>, at a price of <square-price> per one square" cr
  
  1 halt
} : usage

"wallet-query" =: savefile
true =: bounce

begin-options
  "S" "--savefile" { =: savefile } short-long-option-arg
  "h" "--help" { usage } short-long-option
parse-options

$# 5 < ' usage if
5 :$1..n

$1 =: file-base
$2 bounce parse-load-address =: bounce 2=: dest_addr
$3 parse-int =: seqno
0 =: subid
$4 $>GR =: price
$5 parse-int =: squares_count

0 6 { dup $() parse-int 1 64 rot - << rot or swap 1+ } squares_count times drop =: squares_mask

file-base +".pk" load-keypair nip constant wallet_pk cr 

file-base +".addr" load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr cr

."price = " price .GR cr
."amount = " squares_count . cr
."total price = " price squares_count * dup =: total_price .GR cr cr

."Transferring " total_price .GR ."to account "
dest_addr 2dup bounce 7 + .Addr cr .addr cr cr

."subid = 0x" subid x. cr
."seqno = 0x" seqno x. cr cr

// create a message
<b b{01} s, bounce 1 i, b{000100} s, dest_addr addr, total_price Gram, 0 9 64 32 + + 1+ 1+ u, 
	squares_mask 64 u, wallet_addr addr, b>
<b seqno 32 u, 3 8 u, swap ref, b>

dup ."signing message: " <s csr. cr

dup hashu wallet_pk ed25519_sign_uint
<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>

2 boc+>B savefile +".boc" tuck B>file
."(Saved to file " type .")" cr

1 halt



	








