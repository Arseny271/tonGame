#!/usr/bin/fift -s
"TonUtil.fif" include
"GetOpt.fif" include

{ ."usage: " @' $0 type ." <filename-base> <dest-addr> <contract-id> <seqno> <amount> [<savefile>]" cr
  ."Creates a request to lottery contract created by new-casino.fif, with private key loaded from file <filename-base>.pk "
  ."and address from <filename-base>.addr, and saves it into <savefile>.boc ('game-query.boc' by default)" cr 1 halt
} : usage

"" =: comment  // comment for simple transfers
true =: allow-bounce
3 =: send-mode  // mode for SENDRAWMSG: +1 - sender pays fees, +2 - ignore errors

begin-options
  "h" "--help" { usage } short-long-option
parse-options

$# dup 5 < swap 6 > or ' usage if
6 :$1..n
true =: bounce

$1 =: file-base
$2 bounce parse-load-address allow-bounce and =: bounce 2=: dest_addr
$3 parse-int =: subid
$4 parse-int =: seqno
$5 $>GR =: amount
$6 "game-query" replace-if-null =: savefile

file-base +".pk" load-keypair nip constant wallet_pk

file-base +".addr" load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr cr

."Transferring " amount .GR ."to account "
dest_addr 2dup bounce 7 + .Addr cr .addr cr cr

."subid = 0x" subid x. cr
."seqno = 0x" seqno x. cr cr

// create a message
<b b{01} s, bounce 1 i, b{000100} s, dest_addr addr, amount Gram, 0 9 64 32 + + 1+ 1+ 1+ u, b>
<b subid 32 u, seqno 32 u, send-mode 8 u, swap ref, b>

dup ."signing message: " <s csr. cr

dup hashu wallet_pk ed25519_sign_uint
<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>
   
2 boc+>B savefile +".boc" tuck B>file
."(Saved to file " type .")" cr